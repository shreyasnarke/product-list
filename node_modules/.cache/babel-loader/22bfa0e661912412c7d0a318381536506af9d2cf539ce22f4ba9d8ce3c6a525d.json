{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shreyas\\\\OneDrive\\\\Desktop\\\\REACTAPPS\\\\product-list\\\\src\\\\ProductList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./ProductList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProductList() {\n  _s();\n  const [products, setProducts] = useState([]);\n  const [quantity, setQuantity] = useState(1);\n  useEffect(() => {\n    fetchProductList();\n  }, []);\n  const fetchProductList = async () => {\n    try {\n      const response = await fetch(\"https://dummyjson.com/products\");\n      const data = await response.json();\n      console.log(data); // Check the API response format\n      setProducts(data);\n    } catch (error) {\n      console.error(error);\n      console.error(\"Error fetching product list:\", error);\n    }\n  };\n  const handleQuantityChange = (event, productId) => {\n    const newQuantity = parseInt(event.target.value);\n    setQuantity(newQuantity);\n    const updatedProducts = [];\n    for (let i = 0; i < products.length; i++) {\n      const product = products[i];\n      if (product.id === productId) {\n        const updatedProduct = {\n          ...product,\n          quantity: newQuantity\n        };\n        updatedProducts.push(updatedProduct);\n      } else {\n        updatedProducts.push(product);\n      }\n    }\n    setProducts(updatedProducts);\n  };\n  const calculateTotal = () => {\n    let total = 0;\n    if (Array.isArray(products)) {\n      for (let i = 0; i < products.length; i++) {\n        const product = products[i];\n        const productTotal = product.price * (product.quantity || quantity);\n        total = total + productTotal;\n      }\n    }\n    return total;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"product-table\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Product List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Quantity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Total\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: Array.isArray(products) && products.length > 0 ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: products.map(product => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: product.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\"Rs.\", product.price]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: product.quantity || quantity,\n                onChange: event => handleQuantityChange(event, product.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\"Rs.\", product.price * (product.quantity || quantity)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 19\n            }, this)]\n          }, product.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: \"4\",\n            children: \"No products found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"total-quantity\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Total:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Rs.\", calculateTotal()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(ProductList, \"EQ6PyWb2n0tsg9pUk1SaaItFlVQ=\");\n_c = ProductList;\nexport default ProductList;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./ProductList.css\";\n// function ProductList() {\n//   const [products, setProducts] = useState([]);\n//   const [quantity, setQuantity] = useState(1);\n\n//   useEffect(() => {\n//     fetchProductList();\n//   }, []);\n\n//   const fetchProductList = async () => {\n//     try {\n//       const response = await fetch(\"https://dummyjson.com/products\");\n//       const data = await response.json();\n//       setProducts(data);\n//     } catch (error) {\n//       console.error(error);\n//       console.error(\"Error fetching product list:\", error);\n//     }\n//   };\n\n//   const handleQuantityChange = (event, productId) => {\n//     const newQuantity = parseInt(event.target.value);\n//     setQuantity(newQuantity);\n//     setProducts((prevProducts) =>\n//       prevProducts.map((product) =>\n//         product.id === productId\n//           ? { ...product, quantity: newQuantity }\n//           : product\n//       )\n//     );\n//   };\n//   const calculateTotal = () => {\n//     let total = 0;\n\n//     if (Array.isArray(products)) {\n//       products.forEach((product) => {\n//         const productTotal = product.price * (product.quantity || quantity);\n//         total = total+productTotal;\n//       });\n//     }\n\n//     return total;\n//   };\n//   return (\n//     <div className=\"product-table\">\n//       <h1>Product List</h1>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Name</th>\n//             <th>Price</th>\n//             <th>Quantity</th>\n//             <th>Total</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//   {Array.isArray(products) && products.length > 0 ? (\n//     products.map((product) => (\n//       <tr key={product.id}>\n//         <td>{product.title}</td>\n//         <td>Rs.{product.price}</td>\n//         <td>\n//           <input\n//             type=\"number\"\n//             value={product.quantity || quantity}\n//             onChange={(event) => handleQuantityChange(event, product.id)}\n//           />\n//         </td>\n//         <td>Rs.{product.price * (product.quantity || quantity)}</td>\n//       </tr>\n//     ))\n//   ) : (\n//     <tr>\n//       <td colSpan=\"4\">No products found</td>\n//     </tr>\n//   )}\n// </tbody>\n//       </table>\n//       <div className=\"total-quantity\">\n//         <span>Total:</span>\n//         <span>Rs.{calculateTotal()}</span>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default ProductList;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./ProductList.css\";\n// import { fetchProductList } from \"./api\";\n// function ProductList() {\n//   const [products, setProducts] = useState([]);\n//   const [quantity, setQuantity] = useState(1);\n\n//   useEffect(() => {\n//     fetchProducts();\n//   }, []);\n\n//   // const fetchProductList = async () => {\n//   //   try {\n//   //     const response = await fetch(\"https://dummyjson.com/products\");\n//   //     const data = await response.json();\n//   //     setProducts(data);\n//   //   } catch (error) {\n//   //     console.error(error);\n//   //     console.error(\"Error fetching product list:\", error);\n//   //   }\n//   // };\n//   const fetchProducts = async () => {\n//     try {\n//       const data = await fetchProductList();\n//       setProducts(data);\n//     } catch (error) {\n//       console.error(\"Error fetching product list:\", error);\n//     }\n//   };\n\n//   const handleQuantityChange = (event, productId) => {\n//     const newQuantity = parseInt(event.target.value);\n//     setQuantity(newQuantity);\n//     setProducts((prevProducts) =>\n//       prevProducts.map((product) =>\n//         product.id === productId\n//           ? { ...product, quantity: newQuantity }\n//           : product\n//       )\n//     );\n//   };\n//   const calculateTotal = () => {\n//     let total = 0;\n\n//     if (Array.isArray(products)) {\n//       products.forEach((product) => {\n//         const productTotal = product.price * (product.quantity || quantity);\n//         total = total+productTotal;\n//       });\n//     }\n\n//     return total;\n//   };\n//   return (\n//     <div className=\"product-table\">\n//       <h1>Product List</h1>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Name</th>\n//             <th>Price</th>\n//             <th>Quantity</th>\n//             <th>Total</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//   {Array.isArray(products) && products.length > 0 ? (\n//     products.map((product) => (\n//       <tr key={product.id}>\n//         <td>{product.title}</td>\n//         <td>Rs.{product.price}</td>\n//         <td>\n//           <input\n//             type=\"number\"\n//             value={product.quantity || quantity}\n//             onChange={(event) => handleQuantityChange(event, product.id)}\n//           />\n//         </td>\n//         <td>Rs.{product.price * (product.quantity || quantity)}</td>\n//       </tr>\n//     ))\n//   ) : (\n//     <tr>\n//       <td colSpan=\"4\">No products found</td>\n//     </tr>\n//   )}\n// </tbody>\n//       </table>\n//       <div className=\"total-quantity\">\n//         <span>Total:</span>\n//         <span>Rs.{calculateTotal()}</span>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default ProductList;\nvar _c;\n$RefreshReg$(_c, \"ProductList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ProductList","_s","products","setProducts","quantity","setQuantity","fetchProductList","response","fetch","data","json","console","log","error","handleQuantityChange","event","productId","newQuantity","parseInt","target","value","updatedProducts","i","length","product","id","updatedProduct","push","calculateTotal","total","Array","isArray","productTotal","price","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","map","title","type","onChange","colSpan","_c","$RefreshReg$"],"sources":["C:/Users/shreyas/OneDrive/Desktop/REACTAPPS/product-list/src/ProductList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./ProductList.css\";\r\n\r\nfunction ProductList() {\r\n  const [products, setProducts] = useState([]);\r\n  const [quantity, setQuantity] = useState(1);\r\n\r\n  useEffect(() => {\r\n    fetchProductList();\r\n  }, []);\r\n\r\n  const fetchProductList = async () => {\r\n    try {\r\n      const response = await fetch(\"https://dummyjson.com/products\");\r\n      const data = await response.json();\r\n      console.log(data); // Check the API response format\r\n      setProducts(data);\r\n    } catch (error) {\r\n      console.error(error);\r\n      console.error(\"Error fetching product list:\", error);\r\n    }\r\n  };\r\n\r\n  const handleQuantityChange = (event, productId) => {\r\n    const newQuantity = parseInt(event.target.value);\r\n    setQuantity(newQuantity);\r\n    const updatedProducts = [];\r\n    for (let i = 0; i < products.length; i++) {\r\n      const product = products[i];\r\n      if (product.id === productId) {\r\n        const updatedProduct = { ...product, quantity: newQuantity };\r\n        updatedProducts.push(updatedProduct);\r\n      } else {\r\n        updatedProducts.push(product);\r\n      }\r\n    }\r\n    setProducts(updatedProducts);\r\n  };\r\n\r\n  const calculateTotal = () => {\r\n    let total = 0;\r\n\r\n    if (Array.isArray(products)) {\r\n      for (let i = 0; i < products.length; i++) {\r\n        const product = products[i];\r\n        const productTotal = product.price * (product.quantity || quantity);\r\n        total = total + productTotal;\r\n      }\r\n    }\r\n\r\n    return total;\r\n  };\r\n\r\n  return (\r\n    <div className=\"product-table\">\r\n      <h1>Product List</h1>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Price</th>\r\n            <th>Quantity</th>\r\n            <th>Total</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Array.isArray(products) && products.length > 0 ? (\r\n            <React.Fragment>\r\n              {products.map((product) => (\r\n                <tr key={product.id}>\r\n                  <td>{product.title}</td>\r\n                  <td>Rs.{product.price}</td>\r\n                  <td>\r\n                    <input\r\n                      type=\"number\"\r\n                      value={product.quantity || quantity}\r\n                      onChange={(event) =>\r\n                        handleQuantityChange(event, product.id)\r\n                      }\r\n                    />\r\n                  </td>\r\n                  <td>Rs.{product.price * (product.quantity || quantity)}</td>\r\n                </tr>\r\n              ))}\r\n            </React.Fragment>\r\n          ) : (\r\n            <tr>\r\n              <td colSpan=\"4\">No products found</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      <div className=\"total-quantity\">\r\n        <span>Total:</span>\r\n        <span>Rs.{calculateTotal()}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductList;\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import \"./ProductList.css\";\r\n// function ProductList() {\r\n//   const [products, setProducts] = useState([]);\r\n//   const [quantity, setQuantity] = useState(1);\r\n  \r\n//   useEffect(() => {\r\n//     fetchProductList();\r\n//   }, []);\r\n  \r\n//   const fetchProductList = async () => {\r\n//     try {\r\n//       const response = await fetch(\"https://dummyjson.com/products\");\r\n//       const data = await response.json();\r\n//       setProducts(data);\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//       console.error(\"Error fetching product list:\", error);\r\n//     }\r\n//   };\r\n  \r\n//   const handleQuantityChange = (event, productId) => {\r\n//     const newQuantity = parseInt(event.target.value);\r\n//     setQuantity(newQuantity);\r\n//     setProducts((prevProducts) =>\r\n//       prevProducts.map((product) =>\r\n//         product.id === productId\r\n//           ? { ...product, quantity: newQuantity }\r\n//           : product\r\n//       )\r\n//     );\r\n//   };\r\n//   const calculateTotal = () => {\r\n//     let total = 0;\r\n  \r\n//     if (Array.isArray(products)) {\r\n//       products.forEach((product) => {\r\n//         const productTotal = product.price * (product.quantity || quantity);\r\n//         total = total+productTotal;\r\n//       });\r\n//     }\r\n  \r\n//     return total;\r\n//   };\r\n//   return (\r\n//     <div className=\"product-table\">\r\n//       <h1>Product List</h1>\r\n//       <table>\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Name</th>\r\n//             <th>Price</th>\r\n//             <th>Quantity</th>\r\n//             <th>Total</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//   {Array.isArray(products) && products.length > 0 ? (\r\n//     products.map((product) => (\r\n//       <tr key={product.id}>\r\n//         <td>{product.title}</td>\r\n//         <td>Rs.{product.price}</td>\r\n//         <td>\r\n//           <input\r\n//             type=\"number\"\r\n//             value={product.quantity || quantity}\r\n//             onChange={(event) => handleQuantityChange(event, product.id)}\r\n//           />\r\n//         </td>\r\n//         <td>Rs.{product.price * (product.quantity || quantity)}</td>\r\n//       </tr>\r\n//     ))\r\n//   ) : (\r\n//     <tr>\r\n//       <td colSpan=\"4\">No products found</td>\r\n//     </tr>\r\n//   )}\r\n// </tbody>\r\n//       </table>\r\n//       <div className=\"total-quantity\">\r\n//         <span>Total:</span>\r\n//         <span>Rs.{calculateTotal()}</span>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default ProductList;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import \"./ProductList.css\";\r\n// import { fetchProductList } from \"./api\";\r\n// function ProductList() {\r\n//   const [products, setProducts] = useState([]);\r\n//   const [quantity, setQuantity] = useState(1);\r\n  \r\n//   useEffect(() => {\r\n//     fetchProducts();\r\n//   }, []);\r\n  \r\n//   // const fetchProductList = async () => {\r\n//   //   try {\r\n//   //     const response = await fetch(\"https://dummyjson.com/products\");\r\n//   //     const data = await response.json();\r\n//   //     setProducts(data);\r\n//   //   } catch (error) {\r\n//   //     console.error(error);\r\n//   //     console.error(\"Error fetching product list:\", error);\r\n//   //   }\r\n//   // };\r\n//   const fetchProducts = async () => {\r\n//     try {\r\n//       const data = await fetchProductList();\r\n//       setProducts(data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching product list:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleQuantityChange = (event, productId) => {\r\n//     const newQuantity = parseInt(event.target.value);\r\n//     setQuantity(newQuantity);\r\n//     setProducts((prevProducts) =>\r\n//       prevProducts.map((product) =>\r\n//         product.id === productId\r\n//           ? { ...product, quantity: newQuantity }\r\n//           : product\r\n//       )\r\n//     );\r\n//   };\r\n//   const calculateTotal = () => {\r\n//     let total = 0;\r\n  \r\n//     if (Array.isArray(products)) {\r\n//       products.forEach((product) => {\r\n//         const productTotal = product.price * (product.quantity || quantity);\r\n//         total = total+productTotal;\r\n//       });\r\n//     }\r\n  \r\n//     return total;\r\n//   };\r\n//   return (\r\n//     <div className=\"product-table\">\r\n//       <h1>Product List</h1>\r\n//       <table>\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Name</th>\r\n//             <th>Price</th>\r\n//             <th>Quantity</th>\r\n//             <th>Total</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//   {Array.isArray(products) && products.length > 0 ? (\r\n//     products.map((product) => (\r\n//       <tr key={product.id}>\r\n//         <td>{product.title}</td>\r\n//         <td>Rs.{product.price}</td>\r\n//         <td>\r\n//           <input\r\n//             type=\"number\"\r\n//             value={product.quantity || quantity}\r\n//             onChange={(event) => handleQuantityChange(event, product.id)}\r\n//           />\r\n//         </td>\r\n//         <td>Rs.{product.price * (product.quantity || quantity)}</td>\r\n//       </tr>\r\n//     ))\r\n//   ) : (\r\n//     <tr>\r\n//       <td colSpan=\"4\">No products found</td>\r\n//     </tr>\r\n//   )}\r\n// </tbody>\r\n//       </table>\r\n//       <div className=\"total-quantity\">\r\n//         <span>Total:</span>\r\n//         <span>Rs.{calculateTotal()}</span>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default ProductList;\r\n\r\n"],"mappings":"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,YAAA;QAAA,OACpC;MACL;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACRxC,OAAA;MAAKmC,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7BpC,OAAA;QAAAoC,QAAA,EAAM;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACnBxC,OAAA;QAAAoC,QAAA,GAAM,KAAG,EAACP,cAAc,CAAC,CAAC;MAAA;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACtC,EAAA,CA/FQD,WAAW;AAAA8C,EAAA,GAAX9C,WAAW;AAiGpB,eAAeA,WAAW;;AAG1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}